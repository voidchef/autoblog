import * as React from 'react';
import Box from '@mui/material/Box';
import NavBar from '../elements/Common/NavBar';
import Footer from '../elements/Common/Footer';
import { Typography, Paper, Divider, Button, Snackbar, Alert, CircularProgress, IconButton, Tooltip } from '@mui/material';
import { VolumeUp as VolumeUpIcon, Star as StarIcon, StarBorder as StarBorderIcon } from '@mui/icons-material';
import Title from '../elements/Blog/Title';
import { marked } from 'marked';
import { useGetBlogQuery, useGenerateAudioNarrationMutation, useToggleFeaturedMutation, IBlog as IBlogAPI } from '../../services/blogApi';
import { useAppSelector, useAppDispatch } from '../../utils/reduxHooks';
import { Helmet } from 'react-helmet-async';
import { useLocation, useParams, useNavigate } from 'react-router-dom';
import BlogLikeDislike from '../elements/BlogLikeDislike';
import CommentSection from '../elements/CommentSection';
import ShareButton from '../elements/ShareButton';
import FollowButton from '../elements/FollowButton';
import AudioPlayer from '../elements/AudioPlayer';
import { ROUTES } from '../../utils/routing/routes';
import * as analytics from '../../utils/analytics';
import { useAuth } from '../../utils/hooks';
import { showSuccess, showError } from '../../reducers/alert';

export default function Blog() {
  const location = useLocation();
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const { preview } = useParams();
  const slug = location.pathname.split('/')[2];
  const { user } = useAuth();

  // Check if in preview mode from query params or route params
  const searchParams = new URLSearchParams(location.search);
  const isPreviewMode = preview === 'true' || searchParams.get('preview') === 'true';

  // Check if user is admin
  const isAdmin = user?.role === 'admin';

  // For preview mode, get data from Redux state
  const previewBlogData = useAppSelector((state) => state.blog.blogData);
  
  // State to control polling based on audio generation status
  const [shouldPoll, setShouldPoll] = React.useState(false);

  const { data: blogData, isLoading, refetch } = useGetBlogQuery(slug, {
    skip: !!isPreviewMode, // Skip query if in preview mode
    pollingInterval: shouldPoll ? 3000 : 0, // Poll every 3s when processing
  });

  const currentBlogData = (isPreviewMode ? previewBlogData : blogData) as IBlogAPI | null;

  // Audio narration mutation
  const [generateAudio, { isLoading: isGeneratingAudio }] = useGenerateAudioNarrationMutation();
  
  // Toggle featured mutation
  const [toggleFeatured] = useToggleFeaturedMutation();

  // Update polling state based on audio generation status
  React.useEffect(() => {
    setShouldPoll(currentBlogData?.audioGenerationStatus === 'processing');
  }, [currentBlogData?.audioGenerationStatus]);

  // Snackbar state for notifications
  const [snackbar, setSnackbar] = React.useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'info';
  }>({
    open: false,
    message: '',
    severity: 'info',
  });

  // Track blog view when blog loads (only for non-preview mode)
  React.useEffect(() => {
    if (!isPreviewMode && currentBlogData && analytics.isGAInitialized()) {
      analytics.trackBlogView(
        currentBlogData.id,
        currentBlogData.title,
        currentBlogData.category
      );
    }
  }, [isPreviewMode, currentBlogData?.id]);

  // Track audio generation completion
  const prevAudioStatusRef = React.useRef<string | undefined>(undefined);
  React.useEffect(() => {
    const prevStatus = prevAudioStatusRef.current;
    const currentStatus = currentBlogData?.audioGenerationStatus;
    
    if (prevStatus === 'processing' && currentStatus === 'completed') {
      setSnackbar({
        open: true,
        message: 'Audio narration is ready! You can now listen to the article.',
        severity: 'success',
      });
    } else if (prevStatus === 'processing' && currentStatus === 'failed') {
      setSnackbar({
        open: true,
        message: 'Audio generation failed. Please try again.',
        severity: 'error',
      });
    }
    
    prevAudioStatusRef.current = currentStatus;
  }, [currentBlogData?.audioGenerationStatus]);

  const handleGenerateAudio = async () => {
    if (currentBlogData?.id) {
      try {
        await generateAudio(currentBlogData.id).unwrap();
        setSnackbar({
          open: true,
          message: 'Audio generation started! This may take a minute...',
          severity: 'success',
        });
        // Trigger a refetch to get updated status
        refetch();
      } catch (error: any) {
        console.error('Failed to generate audio:', error);
        let errorMessage = 'Failed to generate audio. Please try again.';
        
        // Handle conflict error (audio already being generated)
        if (error?.status === 409) {
          errorMessage = 'Audio is already being generated by another user. Please wait...';
        } else if (error?.data?.message) {
          errorMessage = error.data.message;
        }
        
        setSnackbar({
          open: true,
          message: errorMessage,
          severity: 'error',
        });
      }
    }
  };

  const handleToggleFeatured = async () => {
    if (currentBlogData?.id) {
      try {
        const result = await toggleFeatured(currentBlogData.id).unwrap();
        dispatch(showSuccess(`Blog ${result.isFeatured ? 'marked as featured' : 'unmarked as featured'}!`));
        // Trigger a refetch to update the UI
        refetch();
      } catch (error: any) {
        dispatch(showError(error?.data?.message || 'Failed to toggle featured status'));
      }
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  return (
    <Box>
      <Box
        display={'flex'}
        flexDirection={'column'}
        justifyContent={'space-between'}
        sx={{ 
          gap: { xs: 2, sm: 5 },
          bgcolor: (theme) => theme.palette.mode === 'dark' 
            ? theme.palette.background.default
            : theme.palette.customColors.pageBackground.light,
        }}
      >
        <NavBar />
        <Title title={currentBlogData ? currentBlogData.category : 'Loading'} />
      </Box>
      <Box sx={{ my: { xs: 2, md: 4 } }} />
      <Box
        display={'flex'}
        flexDirection={'column'}
        justifyContent={'space-between'}
        sx={{ marginX: { xs: '1rem', sm: '3rem', md: '10rem', lg: '22rem' }, px: { xs: 1, sm: 0 } }}
      >
        {isLoading && !isPreviewMode ? (
          <Box textAlign={'center'}>
            <Typography component={'div'} fontSize={'1.5rem'}>
              Loading blog...
            </Typography>
          </Box>
        ) : currentBlogData ? (
          <Box
            textAlign={'center'}
            display={'flex'}
            flexDirection={'column'}
            justifyContent={'space-between'}
            sx={{ gap: { xs: 1, sm: 2 } }}
          >
            <Helmet>
              <title>{currentBlogData.seoTitle}</title>
              <meta name="description" content={currentBlogData.seoDescription} />
              
              {/* Open Graph / Facebook */}
              <meta property="og:type" content="article" />
              <meta property="og:title" content={currentBlogData.seoTitle} />
              <meta property="og:description" content={currentBlogData.seoDescription} />
              <meta property="og:image" content={currentBlogData.selectedImage} />
              <meta property="og:url" content={window.location.href} />
              <meta property="og:site_name" content="AutoBlog" />
              <meta property="article:author" content={currentBlogData.author?.name} />
              <meta property="article:published_time" content={new Date(currentBlogData.createdAt).toISOString()} />
              <meta property="article:modified_time" content={new Date(currentBlogData.updatedAt).toISOString()} />
              <meta property="article:section" content={currentBlogData.category} />
              {currentBlogData.tags && currentBlogData.tags.map((tag: string, index: number) => (
                <meta key={index} property="article:tag" content={tag} />
              ))}
              
              {/* Twitter */}
              <meta name="twitter:card" content="summary_large_image" />
              <meta name="twitter:title" content={currentBlogData.seoTitle} />
              <meta name="twitter:description" content={currentBlogData.seoDescription} />
              <meta name="twitter:image" content={currentBlogData.selectedImage} />
              
              {/* Additional SEO */}
              <meta name="keywords" content={currentBlogData.tags?.join(', ')} />
              <meta name="author" content={currentBlogData.author?.name} />
              <meta name="robots" content="index, follow" />
              <link rel="canonical" href={window.location.href} />
              
              {/* JSON-LD Structured Data */}
              <script type="application/ld+json">
                {JSON.stringify({
                  "@context": "https://schema.org",
                  "@type": "BlogPosting",
                  "headline": currentBlogData.title,
                  "description": currentBlogData.seoDescription,
                  "image": currentBlogData.selectedImage,
                  "author": {
                    "@type": "Person",
                    "name": currentBlogData.author?.name
                  },
                  "publisher": {
                    "@type": "Organization",
                    "name": "AutoBlog",
                    "logo": {
                      "@type": "ImageObject",
                      "url": `${window.location.origin}/vite.svg`
                    }
                  },
                  "datePublished": new Date(currentBlogData.createdAt).toISOString(),
                  "dateModified": new Date(currentBlogData.updatedAt).toISOString(),
                  "mainEntityOfPage": {
                    "@type": "WebPage",
                    "@id": window.location.href
                  },
                  "keywords": currentBlogData.tags?.join(', '),
                  "wordCount": currentBlogData.content?.split(/\s+/).length,
                  "timeRequired": `PT${currentBlogData.readingTime}M`
                })}
              </script>
            </Helmet>
            <Typography component={'div'} fontSize={{ xs: '1.75rem', sm: '2.5rem', md: '3rem' }} textAlign={'center'} fontWeight={700}>
              {currentBlogData.title}
            </Typography>
            <Box display={'flex'} justifyContent={'space-between'} alignItems={'center'} flexWrap={'wrap'}>
              <Box display={'flex'} alignItems={'center'} gap={2} flexWrap={'wrap'}>
                <Typography 
                  component={'div'} 
                  fontSize={'1rem'} 
                  textAlign={'left'}
                  sx={{
                    '& .text-gray': {
                      color: (theme) => theme.palette.customColors.neutral.gray.text,
                    },
                    '& .text-primary': {
                      color: 'primary.main',
                      fontWeight: 700,
                      cursor: 'pointer',
                      textDecoration: 'none',
                      '&:hover': {
                        textDecoration: 'underline',
                      },
                    },
                  }}
                >
                  <span className="text-gray">By </span>
                  <span 
                    className="text-primary"
                    onClick={() => currentBlogData.author?.id && navigate(`${ROUTES.AUTHOR}/${currentBlogData.author.id}`)}
                  >
                    {currentBlogData.author?.name || 'Unknown'}
                  </span>
                  <span className="text-gray"> | </span>
                  <span className="text-gray">
                    {new Date(currentBlogData.createdAt).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                    })}
                  </span>
                  <span className="text-gray"> | </span>
                  <span className="text-gray">{currentBlogData.readingTime} mins</span>
                </Typography>
                {currentBlogData.author?.id && (
                  <FollowButton 
                    authorId={currentBlogData.author.id} 
                    authorName={currentBlogData.author.name || 'Unknown'}
                    size="small"
                    variant="outlined"
                  />
                )}
              </Box>
              <Box display="flex" gap={1} alignItems="center">
                {isAdmin && currentBlogData && !isPreviewMode && (
                  <Tooltip title={currentBlogData.isFeatured ? "Unmark as Featured" : "Mark as Featured"}>
                    <IconButton
                      onClick={handleToggleFeatured}
                      sx={{
                        color: currentBlogData.isFeatured ? '#FFD700' : 'text.secondary',
                        '&:hover': {
                          color: '#FFD700',
                          bgcolor: (theme) => theme.palette.mode === 'dark' 
                            ? 'rgba(255, 215, 0, 0.1)' 
                            : 'rgba(255, 215, 0, 0.1)',
                        },
                      }}
                    >
                      {currentBlogData.isFeatured ? <StarIcon /> : <StarBorderIcon />}
                    </IconButton>
                  </Tooltip>
                )}
                {!isPreviewMode && <ShareButton blog={currentBlogData} size="medium" />}
              </Box>
            </Box>
            <Box height={{ xs: '15rem', sm: '23rem' }} maxWidth={'100%'} display={'flex'} justifyContent={'center'}>
              <img
                src={currentBlogData.selectedImage}
                alt={currentBlogData.topic}
                style={{ width: '100%', height: '100%', objectFit: 'cover', borderRadius: '0.5rem' }}
              />
            </Box>

            {/* Audio Narration Player */}
            <Box sx={{ my: 3 }}>
              {currentBlogData.audioNarrationUrl ? (
                <AudioPlayer 
                  audioUrl={currentBlogData.audioNarrationUrl}
                  title={currentBlogData.title}
                  blogId={currentBlogData.id}
                  loading={isGeneratingAudio || currentBlogData.audioGenerationStatus === 'processing'}
                />
              ) : currentBlogData.audioGenerationStatus === 'processing' ? (
                <Paper elevation={2} sx={{ p: 3, mb: 3, bgcolor: 'info.lighter' }}>
                  <Box display="flex" alignItems="center" gap={2}>
                    <Box sx={{ position: 'relative', display: 'inline-flex' }}>
                      <CircularProgress size={24} />
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.primary" fontWeight={500}>
                        Audio is being generated...
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        This may take a minute. The page will update automatically when ready.
                      </Typography>
                    </Box>
                  </Box>
                </Paper>
              ) : (
                <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
                  <Box display="flex" justifyContent="space-between" alignItems="center" flexWrap="wrap" gap={2}>
                    <Box display="flex" alignItems="center" gap={1}>
                      <VolumeUpIcon color="action" />
                      <Typography variant="body2" color="text.secondary">
                        Listen to this article
                      </Typography>
                    </Box>
                    <Button
                      variant="outlined"
                      size="small"
                      startIcon={<VolumeUpIcon />}
                      onClick={handleGenerateAudio}
                      disabled={isGeneratingAudio}
                    >
                      {isGeneratingAudio ? 'Starting...' : 'Generate Audio'}
                    </Button>
                  </Box>
                </Paper>
              )}
            </Box>

            <Typography component={'div'} fontSize={{ sx: '1rem', sm: '1.1rem' }} textAlign={'left'}>
              <div dangerouslySetInnerHTML={{ __html: marked(currentBlogData.content) }} />
            </Typography>

            {/* Like/Dislike Section - Hidden in preview mode */}
            {!isPreviewMode && (
              <Box sx={{ my: 4 }}>
                <Paper 
                  elevation={0} 
                  sx={{ 
                    p: 3, 
                    borderRadius: 2,
                    textAlign: 'center',
                    border: '1px solid',
                    borderColor: 'divider',
                  }}
                >
                  <Typography 
                    variant="h6" 
                    gutterBottom 
                    sx={{ 
                      fontWeight: 600,
                      mb: 2
                    }}
                  >
                    Was this article helpful?
                  </Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 2, flexWrap: 'wrap' }}>
                    <BlogLikeDislike blog={currentBlogData} size="large" showCounts />
                    <Box sx={{ borderLeft: '2px solid', borderColor: 'divider', height: '40px', mx: 1 }} />
                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                      <ShareButton blog={currentBlogData} size="large" />
                    </Box>
                  </Box>
                </Paper>
              </Box>
            )}

            {/* Comment Section - Hidden in preview mode */}
            {!isPreviewMode && (
              <Box sx={{ my: 4 }}>
                <Paper 
                  elevation={0} 
                  sx={{ 
                    p: { xs: 2, sm: 3 },
                    borderRadius: 2,
                    border: '1px solid',
                    borderColor: 'divider',
                  }}
                >
                  <Typography 
                    variant="h5" 
                    gutterBottom 
                    sx={{ 
                      fontWeight: 600,
                      mb: 3
                    }}
                  >
                    Comments
                  </Typography>
                  <Divider sx={{ mb: 3 }} />
                  <CommentSection blogId={currentBlogData.id} />
                </Paper>
              </Box>
            )}
          </Box>
        ) : (
          <Box textAlign={'center'}>
            <Typography component={'div'} fontSize={'1.5rem'}>
              Blog not found
            </Typography>
          </Box>
        )}
        <Box sx={{ my: 2 }} />
      </Box>
      <Box sx={{ my: 6 }} />
      <Footer />
      
      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
}
